plugins=(yarn git bundler brew gem nvm pip python osx kubectl)

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

source $ZSH/oh-my-zsh.sh

# Load nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

function rvm_info_for_prompt {
  ruby_version=$(~/.rvm/bin/rvm-prompt)
  if [ -n "$ruby_version" ]; then
    echo "$ruby_version"
  fi
}

function virtualenv_info {
    [ $VIRTUAL_ENV ] && echo '('`basename $VIRTUAL_ENV`') '
}

export VIRTUAL_ENV_DISABLE_PROMPT=1 # Disable virtualenv changing the prompt so we can control it from here

ZSH_THEME="agnoster"

# ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg_no_bold[yellow]%}("
# ZSH_THEME_GIT_PROMPT_SUFFIX="%{$fg_no_bold[yellow]%})%{$reset_color%}"
# ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[red]%}!%{$reset_color%}"
# ZSH_THEME_GIT_PROMPT_CLEAN=""
# ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE='ahead'
# ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE='behind'
# ZSH_THEME_GIT_PROMPT_DIVERGED_REMOTE='diverged'

# git_prompt_info()
ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg[yellow]%}("
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$fg[yellow]%})%{$reset_color%}"

# parse_git_dirty()
ZSH_THEME_GIT_PROMPT_DIRTY=""
ZSH_THEME_GIT_PROMPT_CLEAN=""

# git_prompt_status()
ZSH_THEME_GIT_PROMPT_ADDED=" %{$fg[green]%}✚%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_MODIFIED=" %{$fg[blue]%}✹%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_DELETED=" %{$fg[red]%}✖%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_RENAMED=" %{$fg[magenta]%}➙%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_UNMERGED=" %{$fg[yellow]%}═%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_UNTRACKED=" %{$fg[cyan]%}✭%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_STASHED=""

# git_prompt_ahead()
ZSH_THEME_GIT_PROMPT_AHEAD=" %{$fg[red]%}!%{$reset_color%}"

# git_remote_status
ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE="⬆%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE="⬇%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_DIVERGED_REMOTE="⇄%{$reset_color%}"

ZSH_THEME_GIT_PROMPT_NOCACHE=1

# (<branch><branch tracking>|<local status>)
setopt promptsubst
archey -c -o

# Prompt
#PROMPT='%{$fg_bold[white]%}$(virtualenv_info)%{$reset_color%}%{$fg_no_bold[green]%}%n@%m:%~%{$reset_color%}:%{$fg_bold[white]%}$(nvm_ls current)%{$reset_color%}::$(git_prompt_info)$(git_remote_status)$(git_prompt_status)
PROMPT='%{$fg_bold[white]%}$(virtualenv_info)%{$reset_color%}%{$fg_no_bold[green]%}%n@%m:%~%{$reset_color%}:%{$fg_bold[white]%}$(nvm_ls current)%{$reset_color%}::%{$fg_bold[white]%}$(rvm_info_for_prompt)%{$reset_color%}:$(git_prompt_info)$(git_remote_status)$(git_prompt_status)
$ '
RPROMPT=''

# Prompt - alternative idea (put the info on the right)
# # left
# PROMPT='%{$FG[226]%}%(!.#.⚡)%{$reset_color%} '
#
# # right
# RPROMPT='%{$fg_bold[blue]%}%m%{$fg_bold[white]%}:%{$fg_bold[cyan]%}%30<...<%~%<<%u%{$reset_color%}$(git_prompt_info)$(git_remote_status)$(git_prompt_status)'

# load our own completion functions
fpath=(~/.zsh/completion /usr/local/share/zsh/site-functions /usr/local/share/zsh-completions $fpath)

# completion
autoload -U compinit
compinit -u

# load custom executable functions
for function in ~/.zsh/functions/*; do
  source $function
done

# makes color constants available
autoload -U colors
colors

# enable colored output from ls, etc
export CLICOLOR=1

# history settings
setopt hist_ignore_all_dups inc_append_history
HISTFILE=~/.zhistory
HISTSIZE=4096
SAVEHIST=4096

# awesome cd movements from zshkit
setopt autocd autopushd pushdminus pushdsilent pushdtohome cdablevars
DIRSTACKSIZE=5

# Enable extended globbing
setopt extendedglob

# Allow [ or ] whereever you want
unsetopt nomatch

# vi mode
bindkey -v
bindkey "^F" vi-cmd-mode
bindkey jj vi-cmd-mode

# handy keybindings
bindkey "^A" beginning-of-line
bindkey "^E" end-of-line
bindkey "^K" kill-line
bindkey "^R" history-incremental-search-backward
bindkey "^P" history-search-backward
bindkey "^Y" accept-and-hold
bindkey "^N" insert-last-word
bindkey "^W" forward-word
bindkey "^B" backward-word
bindkey -s "^T" "^[Isudo ^[A" # "t" for "toughguy"

# aliases
[[ -f ~/.aliases ]] && source ~/.aliases

# extra files in ~/.zsh/configs/pre , ~/.zsh/configs , and ~/.zsh/configs/post
# these are loaded first, second, and third, respectively.
_load_settings() {
  _dir="$1"
  if [ -d "$_dir" ]; then
    if [ -d "$_dir/pre" ]; then
      for config in "$_dir"/pre/**/*(N-.); do
        . $config
      done
    fi

    for config in "$_dir"/**/*(N-.); do
      case "$config" in
        "$_dir"/pre/*)
          :
          ;;
        "$_dir"/post/*)
          :
          ;;
        *)
          if [ -f $config ]; then
            . $config
          fi
          ;;
      esac
    done

    if [ -d "$_dir/post" ]; then
      for config in "$_dir"/post/**/*(N-.); do
        . $config
      done
    fi
  fi
}
_load_settings "$HOME/.zsh/configs"

# direnv
eval "$(direnv hook zsh)"

# added by travis gem
[ -f /Users/ekampf/.travis/travis.sh ] && source /Users/ekampf/.travis/travis.sh

# Local config
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/ekampf/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/ekampf/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/ekampf/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/ekampf/google-cloud-sdk/completion.zsh.inc'; fi
